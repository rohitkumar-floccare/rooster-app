"use client"

import type React from "react"
import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Download, FileText, Clock, RefreshCw } from "lucide-react"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"

type Stat = { value: string; labelTop: string; labelBottom: string }
const stats: Stat[] = [
  { value: "247", labelTop: "Reports Generated", labelBottom: "This Month" },
  { value: "1.2 min", labelTop: "Avg. Generation Time", labelBottom: "Last 30 Days" },
  { value: "89", labelTop: "Export Downloads", labelBottom: "This Week" },
  { value: "12", labelTop: "Scheduled Reports", labelBottom: "Active" },
]

type Report = {
  title: string
  desc: string
  updated: string
  formats: string[]
  status?: "ready" | "generating"
}
const reports: Report[] = [
  { title: "Weekly Roster", desc: "Complete schedule with all nurse assignments", updated: "Last updated 2 hours ago", formats: ["PDF", "Excel"], status: "ready" },
  { title: "Compliance Report", desc: "Labor law violations and policy adherence", updated: "Last updated 1 day ago", formats: ["PDF"], status: "ready" },
  { title: "Workload Analysis", desc: "Nurse workload distribution and overtime tracking", updated: "Last updated 3 hours ago", formats: ["Excel", "CSV"], status: "ready" },
  { title: "Coverage Report", desc: "Department staffing levels and coverage gaps", updated: "Last updated 5 hours ago", formats: ["PDF", "Excel"], status: "generating" },
  { title: "Cost Analysis", desc: "Overtime costs and staffing efficiency metrics", updated: "Last updated 1 day ago", formats: ["Excel"], status: "ready" },
  { title: "Staff Satisfaction", desc: "Shift preference fulfillment and fairness metrics", updated: "Last updated 2 days ago", formats: ["PDF"], status: "ready" },
]

type ExportItem = { name: string; meta: string; time: string }
const recentExports: ExportItem[] = [
  { name: "ICU_Roster_Week47.pdf", meta: "2.3 MB • Generated by Dr. Smith", time: "2 hours ago" },
  { name: "Compliance_Report_Nov2024.pdf", meta: "1.8 MB • Generated by Jane Doe", time: "1 day ago" },
  { name: "Workload_Analysis.xlsx", meta: "4.1 MB • Generated by Mike Chen", time: "2 days ago" },
  { name: "Emergency_Coverage.pdf", meta: "1.5 MB • Generated by Sarah Johnson", time: "3 days ago" },
  { name: "Monthly_Summary_Oct2024.pdf", meta: "3.2 MB • Generated by Admin", time: "1 week ago" },
]

export function ReportsDashboard() {
  const [range, setRange] = useState("This Week")
  const [dept, setDept] = useState("All Departments")

  return (
    <div className="space-y-6 md:space-y-8">
      {/* Title + filters + CTA */}
      <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
        <h1 className="text-lg font-medium text-foreground">Generate and export scheduling reports</h1>

        <div className="flex flex-wrap items-center gap-3">
          <Select value={range} onValueChange={setRange}>
            <SelectTrigger className="h-9 rounded-full border-0 bg-muted/60 px-4 dark:bg-muted/40">
              <SelectValue placeholder="This Week" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="This Week">This Week</SelectItem>
              <SelectItem value="This Month">This Month</SelectItem>
              <SelectItem value="Last 30 Days">Last 30 Days</SelectItem>
            </SelectContent>
          </Select>

          <Select value={dept} onValueChange={setDept}>
            <SelectTrigger className="h-9 rounded-full border-0 bg-muted/60 px-4 dark:bg-muted/40">
              <SelectValue placeholder="All Departments" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="All Departments">All Departments</SelectItem>
              <SelectItem value="Emergency">Emergency</SelectItem>
              <SelectItem value="ICU">ICU</SelectItem>
              <SelectItem value="Ward A">Ward A</SelectItem>
            </SelectContent>
          </Select>

          <Button className="h-9 rounded-full px-4 bg-foreground text-background hover:bg-foreground/90">
            Send to HR System
          </Button>
        </div>
      </div>

      {/* Stats row */}
      <div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-4">
        {stats.map((s, i) => (
          <Card key={i} className="rounded-2xl border border-neutral-200 dark:border-neutral-800">
            <CardContent className="px-4 py-3">
              <div className="text-sm text-muted-foreground">{s.labelTop}</div>
              <div className="mt-1 text-3xl font-semibold leading-none">{s.value}</div>
              <div className="mt-1 text-xs text-muted-foreground">{s.labelBottom}</div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Available Reports */}
      <Card className="rounded-2xl border border-neutral-200 dark:border-neutral-800">
        <CardContent className="p-4 md:p-5">
          <h2 className="mb-3 text-base font-medium">Available Reports</h2>

          <div className="grid gap-4 md:grid-cols-2">
            {reports.map((r, idx) => {
              const isGenerating = r.status === "generating"
              return (
                <Card key={idx} className="rounded-xl border border-neutral-200 dark:border-neutral-800">
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between gap-3">
                      <div className="min-w-0">
                        <h3 className="text-sm font-medium">{r.title}</h3>
                        <p className="mt-1 text-sm text-muted-foreground">{r.desc}</p>

                        {/* Last updated row with clock icon */}
                        <div className="mt-2 flex items-center gap-2 text-xs text-muted-foreground">
                          <Clock className="h-3.5 w-3.5" />
                          <span>{r.updated}</span>
                        </div>

                        {/* Formats row with file icon */}
                        <div className="mt-2 flex items-center gap-2 text-xs text-muted-foreground">
                          <FileText className="h-3.5 w-3.5" />
                          <span>{r.formats.join(" / ")}</span>
                        </div>
                      </div>

                      {/* Status pill */}
                      {r.status === "ready" && (
                        <Badge className="h-5 rounded-full px-2 bg-emerald-500/15 text-emerald-700 dark:text-emerald-400">
                          ready
                        </Badge>
                      )}
                      {isGenerating && (
                        <Badge className="h-5 rounded-full px-2 bg-amber-500/15 text-amber-700 dark:text-amber-400">
                          generating
                        </Badge>
                      )}
                    </div>

                    {/* Actions (right side) */}
                    <div className="mt-3 flex justify-end">
                      {!isGenerating ? (
                        <div className="flex items-center gap-2">
                          {r.formats.includes("PDF") && (
                            <Button variant="outline" size="sm" className="rounded-full">
                              <Download className="mr-2 h-4 w-4" />
                              PDF
                            </Button>
                          )}
                          {r.formats.includes("Excel") && (
                            <Button variant="outline" size="sm" className="rounded-full">
                              <Download className="mr-2 h-4 w-4" />
                              Excel
                            </Button>
                          )}
                          {r.formats.includes("CSV") && (
                            <Button variant="outline" size="sm" className="rounded-full">
                              <Download className="mr-2 h-4 w-4" />
                              CSV
                            </Button>
                          )}
                        </div>
                      ) : (
                        <Button variant="secondary" size="sm" disabled className="rounded-full">
                          <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                          Generating...
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {/* Recent Exports */}
      <Card className="rounded-2xl border border-neutral-200 dark:border-neutral-800">
        <CardContent className="p-4 md:p-5">
          <h2 className="mb-3 text-base font-medium">Recent Exports</h2>

          <ul className="divide-y divide-neutral-200 dark:divide-neutral-800">
            {recentExports.map((x) => (
              <li key={x.name} className="flex items-center gap-3 py-3">
                <div className="grid h-9 w-9 place-items-center rounded-md bg-muted text-muted-foreground">
                  <FileText className="h-4 w-4" />
                </div>

                <div className="min-w-0 flex-1">
                  <p className="truncate text-sm font-medium">{x.name}</p>
                  <p className="text-xs text-muted-foreground">{x.meta}</p>
                </div>

                <div className="ml-auto flex items-center gap-3 text-xs text-muted-foreground">
                  <span className="whitespace-nowrap">{x.time}</span>
                  <Button
                    variant="ghost"
                    size="icon"
                    aria-label={`Download ${x.name}`}
                    className="text-muted-foreground"
                  >
                    <Download className="h-5 w-5" />
                  </Button>
                </div>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>
    </div>
  )
}
