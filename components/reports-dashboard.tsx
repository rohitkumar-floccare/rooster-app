"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import {
  Clock,
  Download,
  FileText,
  Filter,
  Gauge,
  Layers,
  Loader2,
  Sheet,
  FileSpreadsheet as Spreadsheet,
  ChevronDown,
  CheckCircle2,
  AlertTriangle,
} from "lucide-react"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"

type Stat = { value: string; labelTop: string; labelBottom: string; icon: React.ReactNode }
const stats: Stat[] = [
  { value: "247", labelTop: "Reports Generated", labelBottom: "This Month", icon: <Layers className="h-4 w-4" /> },
  {
    value: "1.2 min",
    labelTop: "Avg. Generation Time",
    labelBottom: "Last 30 Days",
    icon: <Gauge className="h-4 w-4" />,
  },
  { value: "89", labelTop: "Export Downloads", labelBottom: "This Week", icon: <Download className="h-4 w-4" /> },
  { value: "12", labelTop: "Scheduled Reports", labelBottom: "Active", icon: <Clock className="h-4 w-4" /> },
]

type Report = {
  title: string
  desc: string
  updated: string
  formats: string[]
  status?: "ready" | "generating"
}
const reports: Report[] = [
  {
    title: "Weekly Roster",
    desc: "Complete schedule with all nurse assignments",
    updated: "Last updated 2 hours ago",
    formats: ["PDF", "Excel"],
    status: "ready",
  },
  {
    title: "Compliance Report",
    desc: "Labor law violations and policy adherence",
    updated: "Last updated 1 day ago",
    formats: ["PDF"],
    status: "ready",
  },
  {
    title: "Workload Analysis",
    desc: "Nurse workload distribution and overtime tracking",
    updated: "Last updated 3 hours ago",
    formats: ["Excel", "CSV"],
    status: "ready",
  },
  {
    title: "Coverage Report",
    desc: "Department staffing levels and coverage gaps",
    updated: "Last updated 5 hours ago",
    formats: ["PDF", "Excel"],
    status: "generating",
  },
  {
    title: "Cost Analysis",
    desc: "Overtime costs and staffing efficiency metrics",
    updated: "Last updated 1 day ago",
    formats: ["Excel"],
    status: "ready",
  },
  {
    title: "Staff Satisfaction",
    desc: "Shift preference fulfillment and fairness metrics",
    updated: "Last updated 2 days ago",
    formats: ["PDF"],
    status: "ready",
  },
]

type ExportItem = { name: string; meta: string; time: string; sizeIcon?: React.ReactNode }
const recentExports: ExportItem[] = [
  { name: "ICU_Roster_Week47.pdf", meta: "2.3 MB • Generated by Dr. Smith", time: "2 hours ago" },
  { name: "Compliance_Report_Nov2024.pdf", meta: "1.8 MB • Generated by Jane Doe", time: "1 day ago" },
  { name: "Workload_Analysis.xlsx", meta: "4.1 MB • Generated by Mike Chen", time: "2 days ago" },
  { name: "Emergency_Coverage.pdf", meta: "1.5 MB • Generated by Sarah Johnson", time: "3 days ago" },
  { name: "Monthly_Summary_Oct2024.pdf", meta: "3.2 MB • Generated by Admin", time: "1 week ago" },
]

export function ReportsDashboard() {
  const [range, setRange] = useState("This Week")
  const [dept, setDept] = useState("All Departments")

  return (
    <div className="space-y-8">
      {/* Heading */}
      <div className="flex items-center gap-2 text-muted-foreground">
        <FileText className="h-4 w-4" aria-hidden="true" />
        <h1 className="text-lg font-medium text-foreground">Generate and export scheduling reports</h1>
      </div>

      {/* Controls row */}
      <div className="flex flex-wrap items-center gap-3">
        <Button variant="outline" className="bg-transparent gap-2">
          <Filter className="h-4 w-4" />
          Filters
        </Button>

        <Select value={range} onValueChange={setRange}>
          <SelectTrigger className="w-[160px]">
            <SelectValue placeholder="This Week" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="This Week">This Week</SelectItem>
            <SelectItem value="This Month">This Month</SelectItem>
            <SelectItem value="Last 30 Days">Last 30 Days</SelectItem>
          </SelectContent>
        </Select>

        <Select value={dept} onValueChange={setDept}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="All Departments" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="All Departments">All Departments</SelectItem>
            <SelectItem value="Emergency">Emergency</SelectItem>
            <SelectItem value="ICU">ICU</SelectItem>
            <SelectItem value="Ward A">Ward A</SelectItem>
          </SelectContent>
        </Select>

        <Button className="ml-auto rounded-full px-4 h-9">
          Send to HR System
          <ChevronDown className="ml-2 h-4 w-4 opacity-80" />
        </Button>
      </div>

      {/* Stat cards */}
      <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
        {stats.map((s, i) => (
          <Card key={i} className="border">
            <CardContent className="p-5">
              <div className="flex items-center justify-between text-muted-foreground">
                <span className="text-sm">{s.labelTop}</span>
                {s.icon}
              </div>
              <div className="mt-2 text-2xl font-semibold">{s.value}</div>
              <div className="mt-1 text-xs text-muted-foreground">{s.labelBottom}</div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Available Reports */}
      <section className="space-y-4">
        <div className="flex items-center gap-2">
          <h2 className="text-base font-medium">Available Reports</h2>
          {/* subtle divider dots could be added here if needed */}
        </div>
        <div className="grid gap-4 md:grid-cols-2">
          {reports.map((r) => (
            <Card key={r.title} className="border">
              <CardContent className="p-5">
                <div className="flex items-start gap-3">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2">
                      <h3 className="text-sm font-medium">{r.title}</h3>
                      {r.status === "ready" && (
                        <Badge className="h-5 rounded-full px-2 bg-emerald-500/15 text-emerald-700 dark:text-emerald-400">
                          ready
                        </Badge>
                      )}
                      {r.status === "generating" && (
                        <Badge className="h-5 rounded-full px-2 bg-amber-500/15 text-amber-700 dark:text-amber-400">
                          generating
                        </Badge>
                      )}
                    </div>
                    <p className="mt-1 text-sm text-muted-foreground">{r.desc}</p>
                    <div className="mt-2 flex items-center gap-2 text-xs text-muted-foreground">
                      <Clock className="h-3.5 w-3.5" />
                      <span>{r.updated}</span>
                    </div>
                    <div className="mt-3 text-xs text-muted-foreground">{r.formats.join(" / ")}</div>
                  </div>

                  <div className="flex flex-col gap-2">
                    {/* Action buttons reflect available formats */}
                    {r.formats.includes("PDF") && (
                      <Button variant="outline" size="sm" className="bg-transparent gap-2">
                        <FileText className="h-4 w-4" />
                        PDF
                      </Button>
                    )}
                    {r.formats.includes("Excel") && (
                      <Button variant="outline" size="sm" className="bg-transparent gap-2">
                        <Spreadsheet className="h-4 w-4" />
                        Excel
                      </Button>
                    )}
                    {r.formats.includes("CSV") && (
                      <Button variant="outline" size="sm" className="bg-transparent gap-2">
                        <Sheet className="h-4 w-4" />
                        CSV
                      </Button>
                    )}

                    {r.status === "generating" && (
                      <Button variant="secondary" size="sm" disabled className="gap-2">
                        <Loader2 className="h-4 w-4 animate-spin" />
                        Generating...
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>

      {/* Recent Exports */}
      <section className="space-y-3">
        <h2 className="text-base font-medium">Recent Exports</h2>
        <Card className="border">
          <CardContent className="p-0">
            <ul className="divide-y">
              {recentExports.map((x) => (
                <li key={x.name} className="flex items-center gap-3 p-4">
                  <div className="grid h-9 w-9 place-items-center rounded-md bg-muted text-muted-foreground">
                    <FileText className="h-4 w-4" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <div className="flex items-center gap-2">
                      <p className="truncate text-sm font-medium">{x.name}</p>
                      <CheckCircle2 className="h-4 w-4 text-emerald-500" aria-hidden="true" />
                    </div>
                    <p className="text-xs text-muted-foreground">{x.meta}</p>
                  </div>
                  <div className="ml-auto flex items-center gap-3 text-xs text-muted-foreground">
                    <span>{x.time}</span>
                    <Button
                      variant="ghost"
                      size="icon"
                      aria-label={`Download ${x.name}`}
                      className="text-muted-foreground"
                    >
                      <Download className="h-5 w-5" />
                    </Button>
                  </div>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>

        {/* Optional banner for warnings/info (not in every screenshot, but useful) */}
        <div className="rounded-md border bg-destructive/5 text-destructive px-4 py-3">
          <div className="flex items-center gap-2">
            <AlertTriangle className="h-4 w-4" />
            <p className="text-sm">
              Some departments have pending approvals before exports can be scheduled automatically.
            </p>
          </div>
        </div>
      </section>
    </div>
  )
}
